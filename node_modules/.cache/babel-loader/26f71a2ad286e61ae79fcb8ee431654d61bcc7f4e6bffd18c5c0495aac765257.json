{"ast":null,"code":"import _slicedToArray from\"C:/Users/Mobile Programming/Desktop/my-react-app-latest/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';// rfc extension code\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export default function About(){var _useState=useState({color:'black',backgroundColor:'white'}),_useState2=_slicedToArray(_useState,2),myStyle=_useState2[0],setMyStyle=_useState2[1];var _useState3=useState('Dark Mode Off'),_useState4=_slicedToArray(_useState3,2),btnText=_useState4[0],setBtnText=_useState4[1];var toggleStyle=function toggleStyle(){if(myStyle.color==='black'){setMyStyle({color:'white',backgroundColor:'black'});setBtnText('Dark Mode On');}else{setMyStyle({color:'black',backgroundColor:'white'});setBtnText('Dark Mode Off');}};// const toggleStyle = () =>{\n//     if(myStyle.color == 'white'){\n//         setmyStyle({\n//         color:'white',\n//         backgroundColor:'black'\n//         })\n//     }\n//     else {\n//         setmyStyle({\n//             color:'black',\n//             backgroundColor:'white'\n//             })\n//         }\n//     }\nreturn/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",style:myStyle,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"accordion\",id:\"accordionExample\",style:myStyle,children:[/*#__PURE__*/_jsx(\"h1\",{className:\"my-3\",children:\"About Us\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button\",type:\"button\",style:myStyle,\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseOne\",\"aria-expanded\":\"true\",\"aria-controls\":\"collapseOne\",children:\"Accordion Item #1\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseOne\",className:\"accordion-collapse collapse show\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",style:myStyle,children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the first item's accordion body.\"}),\" It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button collapsed\",type:\"button\",style:myStyle,\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseTwo\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseTwo\",children:\"Accordion Item #2\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseTwo\",className:\"accordion-collapse collapse\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",style:myStyle,children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the second item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button collapsed\",type:\"button\",style:myStyle,\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseThree\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseThree\",children:\"Accordion Item #3\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseThree\",className:\"accordion-collapse collapse\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",style:myStyle,children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the third item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"conatiner\",style:myStyle,children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn btn-primary my-3\",onClick:toggleStyle,children:btnText})})]})});}","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","About","_useState","color","backgroundColor","_useState2","_slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","toggleStyle","children","className","style","id","type","onClick"],"sources":["C:/Users/Mobile Programming/Desktop/my-react-app-latest/src/components/About.js"],"sourcesContent":["import React,{ useState } from 'react'\r\n\r\n// rfc extension code\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle,setMyStyle]= useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    })\r\n\r\n    const [btnText,setBtnText]=useState('Dark Mode Off')\r\n\r\n    const toggleStyle = () => {\r\n        if(myStyle.color === 'black'){\r\n            setMyStyle ({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnText('Dark Mode On');\r\n        }\r\n        else{\r\n            setMyStyle ({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText('Dark Mode Off');            }\r\n        }\r\n       \r\n    \r\n    \r\n    // const toggleStyle = () =>{\r\n    //     if(myStyle.color == 'white'){\r\n    //         setmyStyle({\r\n    //         color:'white',\r\n    //         backgroundColor:'black'\r\n    //         })\r\n    //     }\r\n    //     else {\r\n    //         setmyStyle({\r\n    //             color:'black',\r\n    //             backgroundColor:'white'\r\n    //             })\r\n    //         }\r\n    //     }\r\n\r\n  return (\r\n    <>\r\n    <div className='container' style={myStyle}>\r\n        <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n            <h1 className= 'my-3'>About Us</h1> \r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                Accordion Item #1\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\"  style={myStyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                Accordion Item #2\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\"  style={myStyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n            <button className=\"accordion-button collapsed\" type=\"button\"  style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                Accordion Item #3\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\"  style={myStyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"conatiner\" style={myStyle}>\r\n         <button  type=\"button\"  className=\"btn btn-primary my-3\" onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n    </div>\r\n    \r\n    </>\r\n    \r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}